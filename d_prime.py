from __future__ import division

import datetime
import time
import numpy as np
from numpy.random import random_integers
import pandas as pd
from scipy.stats import norm
import os
import sys
import msvcrt as m
import argparse
import warnings
warnings.simplefilter(action = "ignore", category = UserWarning)


import pandas as pd

import colorama
colorama.init()


def get_data(filename):
    df = pd.read_table(filename, sep = "\t", comment ="#")
    
    #df.columns=["time","port","animal_ID","modeString",
    #    "trial_no","waterCount","trial_delay","istimeout",
    #    "stimTrial","response","lickCount"]

    #df = df[df['modeString'].str.contains("operant|conditioning", regex=True)]    
    df[df.response != 'response']
    df = df.dropna(axis = 0)
    df = df.convert_objects(convert_numeric=True)
   
    return df

def timenow(): 
    return str(datetime.datetime.now().time().strftime('%H:%M:%S'))
    
def z_transform(x): 
    return norm.ppf(x)

    
def simulation (percent, trials):

    trial = np.arange(trials)
    stimulus = random_integers(0,1,trials)

    lick = random_integers(0,1,trials)
    
    percent = int((percent/100) * trials)
    lick[:percent] = stimulus[:percent]

    frequency = stimulus * (random_integers(0,5,trials) *5)

    df = pd.DataFrame([trial,frequency,lick,stimulus])

    df = df.transpose()
    df.columns = ['trial', 'frequency', 'lick', 'stimulus']

    hits = df[df.lick == 1][df.stimulus == 1]
    miss = df[df.lick == 0][df.stimulus == 1]
    false_pos = df[df.lick == 1][df.stimulus == 0]
    false_neg = df[df.lick == 0][df.stimulus == 1]

    pHit = (hits.lick.count() / df.lick[df.stimulus == 1].count()) #P('response'| stimulus present)
    pFAl = (false_pos.lick.count() / df.lick[df.stimulus == 0].count()) #P('response'| stimulus present)

    d_prime = z_transform(pHit) - z_transform(pFAl)

    return d_prime

    
def calc_dprime(df):
  
    N = len(df)

    try:
        hits = len(df[df.response == 1][df.stimTrial == 1])
        miss = len(df[df.response == 0][df.stimTrial == 1])
        true_neg = len(df[df.response == 0][df.stimTrial == 0]) 
        false_pos = len(df[df.response == 1][df.stimTrial == 0])
    
    except: 
        print "wrong type of data frame; need ['response'] and ['stimTrial']"


    pHit = (hits / len(df[df.stimTrial == 1])) #P('response'| stimulus present)
    pFAl = (false_pos / len(df[df.stimTrial == 0])) #P('response'| stimulus present)

    try: d_prime = z_transform(pHit) - z_transform(pFAl)
    except:
        try:
            if (pHit == 0): pHit =  1 - 1/(2*N)
            if (pFAl == 0): pFAl =  1 - 1/(2*N)
            if (pHit == 1): pHit =  1/(2*N)
            if (pFAl == 1): pFAl =  1/(2*N)
        
            d_prime = z_transform(pHit) - z_transform(pFAl)
        except:
            d_prime = "nan"
    
    return d_prime
    
parser = argparse.ArgumentParser(description="calculate the d prime")   
parser.add_argument('file', default="-", help="""logfile generated by Serialcoms""") 
                                            
args = parser.parse_args()
    
if __name__ == '__main__':
    
    date = datetime.date.today().strftime('%y%m%d')
    DATADIR = os.path.join(os.getcwd(), date)

    if not os.path.isdir(DATADIR):
        os.mkdir((DATADIR))

    filename = "d_prime.log"
    outfile = os.path.join(DATADIR, filename)


        
    
    with open(outfile, 'a') as f:
        while m.kbhit() == False:
            df = get_data(args.file)
            d_prime = calc_dprime(df)
            print colorama.Fore.GREEN + colorama.Style.BRIGHT + "current d_prime: " , d_prime, "\r",
            f.write("%s\t%s\n" %(timenow(), d_prime))

    print ""
    print "done"
    sys.exit()